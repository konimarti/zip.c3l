<*
 Tests for archive::zip module.
*>
module archive::zip_test @test;

import std::io;
import archive::zip;

fn void test_read_end_records() => @pool()
{
	char[*] file = {0x00,0x50,0x4B,0x05,0x06,0x00,0x00,0x00,0x00,
			     0x00,0x00,0x00,0x00,0x01,0x02,0x03,0x04,
			     0x00,0x00,0x00,0x00,0x00,0x00};

	InStream in = (ByteReader){}.init(file[..]);

	// Find record
	usz loc = zip::find_signature_r(in, zip::SIGNATURE_END)!!;
	assert(loc == 1);

	// Set file to the start of the eocd record
	in.seek(loc, Seek.SET)!!;

	// Parse record
	ZipEndRecord r;
	r.parse(in)!!;

	assert(r.signature == 0x06054b50,
		"got: %d, but want: %d", r.signature, 0x06054b50);

	assert(r.size_bytes == 0x04030201,
		"got: %d, but want: %d", r.size_bytes, 0x04030201);
}

char[*] zip_data = x`504b03040a000000000071b6065b00000000000000000000000013001c00
746573745f7a69702f6469726563746f72792f555409000356c0936895c0
936875780b000104e803000004e8030000504b03040a000000000083b006
5be9b3a204040000000400000016001c00746573745f7a69702f64697265
63746f72792f666f6f555409000335b59368cbb5936875780b000104e803
000004e80300006261720a504b030414000000080071b6065b00a083d59e
020000530400001a001c00746573745f7a69702f6469726563746f72792f
4c4943454e5345555409000356c0936895c0936875780b000104e8030000
04e80300005d524b6edb3010ddf314b34c00c12d027453144569898e89e8
074a8e9ba52cd1165b493444aa467639487b805ea347c9493a233be90710
207138f37ea3b2d590c8126253ebc169b8c2c33563a13d3e8ee6d07af8f5
136ededebc833b3b1848aad11bf8f015bf173d7d7f3af495e916b5ed3f32
96ebb137ce193b8071d0ea51ef1ee1305683d74d00fb516bb07ba8db6a3c
e800bc856a7884a31e1d0ed89dafcc608603545023397632df228cb37b7f
aa468dcd0d54ced9da5488078dada75e0fbef2c4b7379d7670e5d1cdf3d3
f7e232f3fcf4e37a266a74d5811918ddbf5cc2c9f8d64e1e46edfc686ac2
09b0a9eea68674bc5c77a63717161a9f537108ca26872e486b00bd6dcc9e
de7ab6769c769d716d008d21e8dde4b1e8a838871c9097377604a7bb8e10
8c760c93f95bdddc43d28f14aabfc444bc706a6dff4f2fa5bd9fc60129f5
3cd358e6ecccf845d79e2ad4beb75d674f64adb64363c8917bcf588957d5
ce7ed3b397f3d207eb51ea59022de1f867b3972bd756a87da72f8121af19
004bec6c07c8ddb4731e976f30fba31d673ef8cfe602f9d7028a6c556eb9
12200bc855762f2311d122798115dc62005b59aeb34d09d8a5785a3e40b6
029e3ec09d4ca300c4e75c89a2804c3199e4b114589369186f2299dec212
e7d20cff71893f3702971910e9054a8a82c012a1c2351ef952c6b27c08d8
4a962961ae32051c72ae4a196e62ae20dfa83c2b04d247089bca74a59045
24222d17c88a3510f7788062cde398a818dfa07a45fa20ccf207256fd725
acb33812585c0a54c697b13853a1a930e6320920e209bf15f35486288a51
db591d6cd7824ac4c7f1094b99a56423ccd252e1314097aa7c1dddca4204
c0952c289095ca9280519c3891cd2038978a330a450dff6c055be8bc29c4
2b204482c78855d030597c695eb0df504b03040a000000000088b0065ba8
6138dd06000000060000000e001c00746573745f7a69702f68656c6c6f55
540900033fb59368c6b5936875780b000104e803000004e8030000776f72
6c640a504b03040a0000000000acb0065bfae00c04030000000300000010
001c00746573745f7a69702f756e69636f6465555409000384b59368c6b5
936875780b000104e803000004e8030000ceb40a504b03040a0000080000
8fb6065bcf440cfe14000000140000001f001c00746573745f7a69702f75
6e69636f64652dcf802d696e2d66696c656e616d6555540900038ec09368
95c0936875780b000104e803000004e8030000756e69636f646520696e20
66696c656e616d650a504b01021e030a000000000071b6065b0000000000
00000000000000130018000000000000001000ed4100000000746573745f
7a69702f6469726563746f72792f555405000356c0936875780b000104e8
03000004e8030000504b01021e030a000000000083b0065be9b3a2040400
000004000000160018000000000001000000a4814d000000746573745f7a
69702f6469726563746f72792f666f6f555405000335b5936875780b0001
04e803000004e8030000504b01021e0314000000080071b6065b00a083d5
9e020000530400001a0018000000000001000000a481a100000074657374
5f7a69702f6469726563746f72792f4c4943454e5345555405000356c093
6875780b000104e803000004e8030000504b01021e030a000000000088b0
065ba86138dd06000000060000000e0018000000000001000000a4819303
0000746573745f7a69702f68656c6c6f55540500033fb5936875780b0001
04e803000004e8030000504b01021e030a0000000000acb0065bfae00c04
0300000003000000100018000000000001000000a481e103000074657374
5f7a69702f756e69636f6465555405000384b5936875780b000104e80300
0004e8030000504b01021e030a00000800008fb6065bcf440cfe14000000
140000001f0018000000000001000000a4812e040000746573745f7a6970
2f756e69636f64652dcf802d696e2d66696c656e616d6555540500038ec0
936875780b000104e803000004e8030000504b0506000000000600060024
0200009b0400000000`;

fn void test_open_zip_archive() => @pool()
{
	ZipReader z;

	// Open a regular zip archive.
	z = zip::topen((ByteReader){}.init(zip_data[..]))!!;
	assert(z.len() == 6);

	// Open a damaged zip archive without the end of record signature.
	z = zip::topen((ByteReader){}.init(zip_data[..^22]))!!;
	assert(z.len() == 6);
}


